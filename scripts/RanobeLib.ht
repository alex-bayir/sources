import 'imports.ht'

final version='1.0';
final domains=['ranobelib.me'];
var domain=domains[0];
final source='RanobeLib';
final types='Novel/Ranobe';
final description='Один из самых популярных источников новел в СНГ.';
fun host()=>'https://${domain}';
fun api()=>'https://api.lib.social';
fun icon()=>'${host()}/images/logo/hl/favicon.ico';
final auth_tokens={'cf_clearance':null,'mangalib_session':null,'XSRF-TOKEN':'X-Xsrf-Token','Authorization':null};
final site=3;

final filters_map={
    "sorts":{"По рейтингу":"rate_avg", "По названию (A-Z)":"name", "По названию (А-Я)":"rus_name","По дате релиза":"releaseDate","По дате обновлениям":"last_chapter_at","По дате добавления":"created_at","По просмотрам":"views","По количеству глав":"chap_count"},
    "order":{"По убыванию":"desc","По возрастанию":"asc"},
    "bookmarks":{"Читаю":"1","В планах":"2","Брошено":"3","Прочитано":"4","Любимые":"5"}
};

fun update(url:str) async {
    var response=await load('${url}?fields[]=background&fields[]=eng_name&fields[]=otherNames&fields[]=summary&fields[]=releaseDate&fields[]=type_id&fields[]=caution&fields[]=views&fields[]=rate_avg&fields[]=rate&fields[]=genres&fields[]=tags&fields[]=teams&fields[]=franchise&fields[]=authors&fields[]=publisher&fields[]=manga_status_id&fields[]=chap_count&fields[]=status_id&fields[]=artists&fields[]=format');
    if(response['status']==200){
        var info=decode(unescape(response['body']))['data'];
        return {
            'id':info['id'],
            'slug':info['slug'],
            'url':url,
            'web':'${host()}/ru/manga/${info['slug']}',
            'type':info['model'],
            'names':([info['name'],info['rus_name'],info['eng_name']]+info['otherNames']).where((e)=>e!=null && e!=''),
            'authors':toMap(info['authors'],key:(e)=>e['name'],value:(e)=>'${api()}/api/manga?site_id[]=${site}&target_id=${e['id']}&target_model=${e['model']}'),
            'artists':toMap(info['artists'],key:(e)=>e['name'],value:(e)=>'${api()}/api/manga?site_id[]=${site}&target_id=${e['id']}&target_model=${e['model']}'),
            'publishers':toMap(info['publisher'],key:(e)=>e['name'],value:(e)=>'${api()}/api/manga?site_id[]=${site}&target_id=${e['id']}&target_model=${e['model']}'),
            'genres':info['genres'].map((e)=>e['name']),
            'tags':info['tags'].map((e)=>e['name']),
            'rating':num_parse(info['rating']['average'])/2,
            'status':status(info['status']['id'].toString()),
            'description':info['summary'],
            'cover':info['cover']['default'],
            'background':info['background']['url']
        };
    }else{
        log(encode(response));
        return null;
    }
}

fun branches(url:str) async {
    final response=await load('${url}/chapters');
    if(response['status']==200){
        final chapters=decode(unescape(response['body']))['data'];
        var branches=chapters.expand((chapter)=>chapter['branches'].map((branch)=>{
            'id':branch['branch_id'],
            'name':branch['teams'].first['name'],
            'chapter':{
                'id':branch['id'],
                'vol':num_parse(chapter['volume']),
                'num':num_parse(chapter['number']),
                'name':chapter['name'],
                'date':timestamp(branch['created_at'],"yyyy-MM-ddTHH:mm:ss"),
                'teams':Prototype.fromJson(toMap(branch['teams'],key:(e)=>e['name'],value:(e)=>'${api()}/api/manga?site_id[]=${site}&target_id=${e['id']}&target_model=team')),
                'users':Prototype.fromJson(toMap([branch['user']],key:(e)=>e['username'],value:(e)=>'${api()}/api/bookmarks?page=1&status=0&user_id=${e['id']}'))
            }
        }).toList());
        branches=Prototype.fromJson(toMap(
            branches.map((branch)=>branch['id']),
            key:(bid)=>bid?.toString() ?? 'null',
            value:(bid)=>{
                'id':bid?.toString() ?? 'null',
                'name':branches.where((branch)=>branch['id']==bid).map((branch)=>branch['name']).first,
                'chapters':branches.where((branch)=>branch['id']==bid).map((branch)=>branch['chapter']).toList()
            }
        ));
        return branches;
    }else{
        log(encode(response));
        return null;
    }
}


fun query(name:str?,page:int?,filters) async {
    if(find(name,'[a-z]://[^ >,;]*')){
        return await query_url(name,page)
    }else if(filters!=null){
        var empty=(string)=>string==null || string=='' ? null:string;
        var url_params={'q':empty(name),'page':page+1,'site_id[]':site}
        if(filters['sort']!=null){
            url_params['sort_by']=empty(filters['sort']['selected']);
            url_params['sort_type']=empty(filters['sort']['sort']);
        }
        if(filters['chapters']!=null){
            url_params['chap_count_min']=empty(filters['chapters']['start']);
            url_params['chap_count_max']=empty(filters['chapters']['end']);
        }
        if(filters['release']!=null){
            url_params['year_min']=empty(filters['release']['start']);
            url_params['year_max']=empty(filters['release']['end']);
        }
        if(filters['rating']!=null){
            url_params['rating_min']=empty(filters['rating']['start']);
            url_params['rating_max']=empty(filters['rating']['end']);
        }
        if(filters['genres']!=null){
            url_params[filters['genres']['selected'].map((e)=>'genres[]=${e}').join('&')]='';
            url_params[filters['genres']['deselected'].map((e)=>'genres_exclude[]=${e}').join('&')]='';
        }
        if(filters['tags']!=null){
            url_params[filters['tags']['selected'].map((e)=>'tags[]=${e}').join('&')]='';
            url_params[filters['tags']['deselected'].map((e)=>'tags_exclude[]=${e}').join('&')]='';
        }
        if(filters['series']!=null){
            url_params[filters['series']['selected'].map((e)=>'series[]=${e}').join('&')]='';
        }
        if(filters['types']!=null){
            url_params[filters['types']['selected'].map((e)=>'types[]=${e}').join('&')]='';
        }
        if(filters['statuses']!=null){
            url_params[filters['statuses']['selected'].map((e)=>'status[]=${e}').join('&')]='';
        }
        if(filters['formats']!=null){
            url_params[filters['formats']['selected'].map((e)=>'format[]=${e}').join('&')]='';
            url_params[filters['formats']['deselected'].map((e)=>'format_exclude[]=${e}').join('&')]='';
        }
        url_params['']=null;
        return await query_url(url('${api()}/api/manga',url_params),null)
    }
}


fun query_url(url:str,page:int?) async {
    url=raw(url);
    if(find(url,'${api()}/api/manga') || find(url,'${api()}/api/bookmarks')){
        if(page!=null && page>0){
            url=find(url,'page=') ? gsub(url,'page=%d+','page=${page+1}') : '${url}&page=${page+1}'
        }
        var response=await load(url,{'Site-Id':'${site}'});
        print('${response['status']} ${url}');
        if(response['status']==200){
            return parse_books(decode(unescape(response['body']))['data']);
        }else{
            print(unescape(response['body']));
            log(encode(response));
            return null;
        }
    }
}

var servers={};
fun pages(url,branch,chapter) async {
    var response=await load(safe_params('${url}/chapter',{'branch_id':branch['id']=='null' ? null : branch['id'],'volume':chapter['vol'],'number':chapter['num']}));
    if(response['status']==200){
        return decode(unescape(response['body']))['data']['content'].split('(<p\s.+>.*<\/p>|<img\s.+\/>)').map((e)=>match(e,'<p\s.+>(.*)<\/p>')??match(e,'<img\s.*src=\\"(.+)\\"')).toList();
    }else{
        print(response['body']);
        log(encode(response));
        return null;
    }
}


fun filters()=>{
    'sort':{
        'title':'Сортировка',
        'mode':'single',
        'order':true,
        'values': filters_map['sorts']
    },
    'chapters':{
        'title':'Колличество глав',
        'mode':'range'
    },
    'release':{
        'title':'Год выпуска',
        'mode':'range'
    },
    'rating':{
        'title':'Оценка',
        'mode':'range'
    },
    'types':{
        'title':'Типы',
        'mode':'double',
        'values': filters_map['types']
    },
    'statuses':{
        'title':'Статус тайтла',
        'mode':'double',
        'values': filters_map['statuses']
    },
    'formats':{
        'title':'Формат',
        'mode':'three',
        'values': filters_map['formats']
    },
    'scanlate':{
        'title':'Статус перевода',
        'mode':'three',
        'values': filters_map['scanlates']
    },
    'bookmarks':{
        'title':'Мои списки',
        'mode':'three',
        'values': filters_map['bookmarks']
    },
    'genres':{
        'title':'Жанры',
        'mode':'three',
        'values': filters_map['genres']
    },
    'tags':{
        'title':'Теги',
        'mode':'three',
        'values': filters_map['tags']
    }
};

fun similar(book) async {
    var response=await load('${book['url']}/similar');
    if(response['status']==200){
        return parse_books(decode(unescape(response['body']))['data'].map((e)=>e['media']));
    }else{
        print(unescape(response['body']));
        log(encode(response));
        return null;
    }
};

fun status(status:str) => {'3':'Announce','1':'Ongoing','4':'Paused','5':'Stopped','2':'Finished'}[status];

fun parse_books(json)=>json.map((e)=>e['media'] ?? e).map((e)=>{
    'id':e['id'],
    'slug':e['slug'],
    'url':'${api()}/api/manga/${e['slug']}',
    'web':'${host()}/ru/manga/${e['slug']}',
    'names':[e['name'],e['rus_name'],e['eng_name']],
    'rating':num_parse(e['rating']?['average'] ?? '0')/2,
    'status':status(e['status']['id'].toString()),
    'type':e['model'],
    'restrictions':e['ageRestriction']?['label'],
    'cover':e['cover']['default']
}).toList();

fun safe_params(uri:str,params)=>raw(url(uri,params));
if(filters_map.length<8){
    load('${api()}/api/constants?fields[]=genres&fields[]=tags&fields[]=types&fields[]=scanlateStatus&fields[]=status&fields[]=format&fields[]=ageRestriction').then((response){
        if(response['status']==200){
            var json=decode(unescape(response['body']))['data']
            filters_map['genres']=toMap(json['genres'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['name'],value: (e)=>e['id']);
            filters_map['tags']=toMap(json['tags'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['name'],value: (e)=>e['id']);
            filters_map['types']=toMap(json['types'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['label'],value: (e)=>e['id']);
            filters_map['statuses']=toMap(json['status'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['label'],value: (e)=>e['id']);
            filters_map['scanlates']=toMap(json['scanlateStatus'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['label'],value: (e)=>e['id']);
            filters_map['formats']=toMap(json['format'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['name'],value: (e)=>e['id']);
            filters_map['restrictions']=toMap(json['ageRestriction'].where((e)=>e['site_ids'].contains(site)),key: (e)=>e['label'],value: (e)=>e['id']);
        }else{
            log(encode(response));
            return null;
        }
    });
}