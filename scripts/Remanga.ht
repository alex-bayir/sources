import 'imports.ht'

final version="1.0"
final domains=["remanga.org","реманга.орг","recomics.org"]
var domain=domains[0]
final source="Remanga"
final types="Manga/Manhwa"
final description="Ещё один довольно популярный каталог манги."
fun host()=>'https://api.${domain}';
fun icon()=>'${host()}/favicon.ico';
final auth_tokens={"user":null,"token":null};

final filters_map=['sort'].toMap((e)=>e,(e)=>{'1':'-rating','2':'-id','3':'-chapter_date'});

fun update(url:str) async {
    url=gsub(url,"https?:[\\/][\\/][^\\/]+",host());
    var response=await uload(url);
    assert(response['status']==200);
    final json=decode(converting(response['body'],'iso-8859-1'))['content'];
    return {
        'id':json['id'],
        'url':url,
        'url_web':'https://${domain}/manga/${json['dir']}',
        'names':([json['main_name'],json['secondary_name']]+json['another_name'].split(' / ')).toSet().toList(),
        'genres':json['genres'].map((e)=>e['name']).toList(),
        'tags':json['categories'].map((e)=>e['name']).toList(),
        'rating':((json['avg_rating'] is str) ? (num.parse(json['avg_rating'])/2) : (json['avg_rating']/2)),
        'status':status(json['status']['name']),
        'description':json['description'],
        'cover':'${host()}${json['img']['high']}'
    }
}

fun branches(url:str) async {
    var response=await uload(url);
    assert(response['status']==200);
    final json=decode(converting(response['body'],'iso-8859-1'))['content'];
    final branches=Map();
    for(var branch in json['branches']){
        final chapters=[];
        final users=branch['publishers'].toMap((e)=>e['name'],(e)=>'https://${domain}/api/titles?count=100&ordering=-id&publisher=${e['id']}').jsonify();
        for(var i=1;i<=(branch['count_chapters']/100.0).ceil();i++){
            response=await uload('${host()}/api/titles/chapters/?branch_id=${branch['id']}&count=100&page=${i}');
            assert(response['status']==200);
            chapters.addAll(decode(converting(response['body'],'iso-8859-1'))['content'].map((e)=>{
                'id':e['id'],
                'vol':e['tome'],
                'num':num.parse(e['chapter']),
                'name':e['name'],
                'date':timestamp(e['upload_date'],"yyyy-MM-dd'T'HH:mm:ss"),
                'users':users,
                'open':e['is_paid'] ? (e['is_bought'] ? null : timestamp(e['pub_date'],"yyyy-MM-dd'T'HH:mm:ss")) : null
            }).toList().reversed);
        }
        
        branches[branch['id']]={
            'id':branch['id'].toString(),
            'chapters':chapters
        };
    }
    return branches.jsonify();
}

fun query(name:str?,page:int?,filters) async {
    final empty=(string)=>string==null || string=='' ? null:string;
    final url_params={'query':empty(name),'page':page+1};
    if(filters!=null){
        if(filters['sort']!=null){
            url_params['ordering']=filters['sort']['selected'];
        }
        if(filters['genres']!=null){
            url_params['genres']=empty(filters['genres']['selected']);
        }
        if(filters['tags']!=null){
            url_params['categories']=empty(filters['tags']['selected']);
        }
        if(filters['types']!=null){
            url_params['types']=empty(filters['types']['selected']);
        }
        if(filters['status']!=null){
            url_params['status']=empty(filters['status']['selected']);
        }
        if(filters['age_limit']!=null){
            url_params['age_limit']=empty(filters['age_limit']['selected']);
        }
        if(filters['relations']!=null){
            url_params['relations']=empty(filters['relations']['selected']);
        }
        if(filters['translate_status']!=null){
            url_params['translate_status']=empty(filters['translate_status']['selected']);
        }
        if(filters['additional']!=null){
            url_params['additional']=empty(filters['additional']['selected']);
        }
    }
    return await query_url(url('${host()}/api/search${empty(name)!=null ? '/' : '/catalog/'}',url_params),null)
}

fun query_url(url:str?,page:int?) async {
    if(page!=null){
        url=url.contains('page=') ? gsub(url,'page=\d+','page=${page+1}') : '${url}&page=${page+1}';
    }
    print(url);
    final response=await uload(url);
    assert(response['status']==200);
    return decode(converting(response['body'],'iso-8859-1'))['content'].map((e)=>{
        'id':e['id'],
        'url':'${host()}/api/titles/${e['dir']}',
        'web':'https://${domain}/manga/${e['dir']}',
        'names':[e['rus_name'],e['en_name']],
        'rating':num.parse(e['avg_rating']??'0.0')/2,
        'cover':'${host()}${e['img']['high']}'
    });
}

fun pages(url,branch,chapter) async {
    final response=await uload(gsub(url,'[^/]+$','chapters/${chapter['id']}'));
    assert(response['status']==200);
    return decode(converting(response['body'],'iso-8859-1'))['content']['pages'].expand((e)=>(e is List) ? e.map((e)=>e['link']).toList() : [e['link']]).toList();
}

fun filters()=>{
    'sort':{
        'title':'Сортировка',
        'mode':'single',
        'order':true,
        'values': filters_map['sorts']
    },
    'genres':{
        'title':'Жанры',
        'mode':'double',
        'values': filters_map['genres']
    },
    'tags':{
        'title':'Теги',
        'mode':'double',
        'values': filters_map['categories']
    },
    'types':{
        'title':'Типы',
        'mode':'double',
        'values': filters_map['types']
    },
    'status':{
        'title':'Статус тайтла',
        'mode':'double',
        'values': filters_map['status']
    },
    'age_limit':{
        'title':'Возрастное ограничение',
        'mode':'double',
        'values': filters_map['age_limit']
    },
    'relations':{
        'title':'Тип истории',
        'mode':'double',
        'values': filters_map['relations']
    },
    'translate_status':{
        'title':'Статус перевода',
        'mode':'double',
        'values': filters_map['translate_status']
    },
    'additional':{
        'title':'Дополнительно',
        'mode':'double',
        'values': filters_map['additional']
    }
}

fun similar(book) async {
    final response=await uload('${book['url']}/similar');
    assert(response['status']==200);
    return decode(converting(response['body'],'iso-8859-1'))['content'].map((e)=>e['title']).map((e)=>{
        'id':e['id'],
        'url':'${host()}/api/titles/${e['dir']}',
        'web':'https://${domain}/manga/${e['dir']}',
        'names':[e['rus_name'],e['en_name']],
        'rating':num.parse(e['avg_rating']??'0.0')/2,
        'cover':'${host()}${e['img']['high']}'
    });
}

fun status(status){
    return {'Анонс':'Announce','Продолжается':'Ongoing','Нет переводчика':'Paused','Заморожен':'Stopped','Закончен':'Finished'}[status];
}

fun categories() async {
    if(filters_map.length<2){
        var response = await sload('https://remanga.org/manga')
        assert(response['status']==200);
        final json=decode(match(response['body'],'<script id="__NEXT_DATA__" type="application\\/json">\\s+({[\\s\\S]+})<\\/script>'))['props']['pageProps']['fallbackData']['filters']['content'];
        filters_map.addAll(json.keys.toMap((e)=>e,(e)=>json[e].toMap((e)=>e['name'],(e)=>e['id'])));
        return true;
    }else{
        return false;
    }
}

categories();